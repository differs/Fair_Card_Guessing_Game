import { ApiPromise, WsProvider } from '@polkadot/api';
import { gearTypes, gearRpc } from './default/index.js';
import { GearBalance } from './Balance.js';
import { GearBlock } from './Blocks.js';
import { GearClaimValue } from './Claim.js';
import { GearCode } from './Code.js';
import '@polkadot/types';
import { GearEvents } from './events/Events.js';
import { GearMailbox } from './Mailbox.js';
import { GearMessage } from './Message.js';
import { GearProgram } from './Program.js';
import { GearProgramState } from './State.js';
import { GearProgramStorage } from './Storage.js';
import { GearVoucher } from './Voucher.js';
import { GearWaitlist } from './Waitlist.js';

class GearApi extends ApiPromise {
    program;
    programState;
    programStorage;
    message;
    balance;
    gearEvents;
    defaultTypes;
    blocks;
    mailbox;
    claimValueFromMailbox;
    code;
    waitlist;
    voucher;
    provider;
    constructor(options = {}) {
        const { types, providerAddress, ...restOptions } = options;
        const provider = restOptions?.provider || new WsProvider(providerAddress ?? 'ws://127.0.0.1:9944');
        const defaultTypes = types ? { ...types, ...gearTypes } : gearTypes;
        super({
            provider,
            derives: {},
            types: {
                ...defaultTypes,
            },
            rpc: {
                ...gearRpc,
            },
            // it's temporarily necessary to avoid the warning "API/INIT: Not decorating unknown runtime apis: GearApi/1"
            runtime: {
                GearApi: [
                    {
                        methods: {},
                        version: 1,
                    },
                ],
            },
            ...restOptions,
        });
        this.provider = provider;
        this.program = new GearProgram(this);
        this.voucher = new GearVoucher(this);
        this.message = new GearMessage(this);
        this.balance = new GearBalance(this);
        this.gearEvents = new GearEvents(this);
        this.defaultTypes = defaultTypes;
        this.programState = new GearProgramState(this);
        this.blocks = new GearBlock(this);
        this.programStorage = new GearProgramStorage(this);
        this.claimValueFromMailbox = new GearClaimValue(this);
        this.mailbox = new GearMailbox(this);
        this.code = new GearCode(this);
        this.waitlist = new GearWaitlist(this);
    }
    static async create(options) {
        const api = new GearApi(options);
        await api.isReady;
        return api;
    }
    async totalIssuance() {
        return (await this.query.balances.totalIssuance()).toHuman();
    }
    async chain() {
        return (await this.rpc.system.chain()).toHuman();
    }
    async nodeName() {
        return (await this.rpc.system.name()).toHuman();
    }
    async nodeVersion() {
        return (await this.rpc.system.version()).toHuman();
    }
    get existentialDeposit() {
        return this.consts.balances.existentialDeposit;
    }
    get blockGasLimit() {
        return this.consts.gearGas.blockGasLimit;
    }
    get mailboxTreshold() {
        return this.consts.gear.mailboxThreshold;
    }
    get waitlistCost() {
        return this.consts.gearScheduler.waitlistCost;
    }
    async wasmBlobVersion() {
        const result = await this.rpc['runtime'].wasmBlobVersion();
        return result.toString();
    }
    /**
     * Method provides opportunity to get informations about error occurs in ExtrinsicFailed event
     * @param event
     * @returns
     */
    getExtrinsicFailedError(event) {
        const error = event.data[0];
        const { isModule, asModule } = error;
        return isModule ? this.registry.findMetaError(asModule) : null;
    }
}

export { GearApi };
