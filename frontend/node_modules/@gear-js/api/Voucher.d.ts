import { HexString } from '@polkadot/util/types';
import { ISubmittableResult } from '@polkadot/types/types';
import { SubmittableExtrinsic } from '@polkadot/api/types';
import { GearTransaction } from './Transaction';
export declare class GearVoucher extends GearTransaction {
    /**
     * ### Issue a new voucher for a `user` to be used to pay for sending messages to `program_id` program.
     * @param to The voucher holder account id.
     * @param program The program id, messages to whom can be paid with the voucher.
     * @param value The voucher amount.
     * @returns Submittable result
     *
     * @example
     * ```javascript
     * const programId = '0x..';
     * const account = '0x...'
     * const tx = api.voucher.issue(account, programId, 10000)
     * tx.signAndSend(account, (events) => {
     *   events.forEach(({event}) => console.log(event.toHuman()))
     * })
     * ```
     */
    issue(to: HexString, program: HexString, value: number | bigint | string): {
        extrinsic: SubmittableExtrinsic<'promise', ISubmittableResult>;
        voucherId: HexString;
    };
    exists(programId: HexString, accountId: HexString): Promise<boolean>;
}
