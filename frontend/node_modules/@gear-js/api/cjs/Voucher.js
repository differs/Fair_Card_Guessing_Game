'use strict';

require('@polkadot/util');
var generate = require('./utils/generate.js');
require('./utils/prefixes.js');
require('./utils/separator.js');
var validate = require('./utils/validate.js');
require('@polkadot/api');
require('@polkadot/util-crypto');
require('@polkadot/types');
require('assert');
require('./default/index.js');
require('./metadata/programMetadata.js');
var Transaction = require('./Transaction.js');

class GearVoucher extends Transaction.GearTransaction {
    /**
     * ### Issue a new voucher for a `user` to be used to pay for sending messages to `program_id` program.
     * @param to The voucher holder account id.
     * @param program The program id, messages to whom can be paid with the voucher.
     * @param value The voucher amount.
     * @returns Submittable result
     *
     * @example
     * ```javascript
     * const programId = '0x..';
     * const account = '0x...'
     * const tx = api.voucher.issue(account, programId, 10000)
     * tx.signAndSend(account, (events) => {
     *   events.forEach(({event}) => console.log(event.toHuman()))
     * })
     * ```
     */
    issue(to, program, value) {
        const voucherId = generate.generateVoucherId(to, program);
        this.extrinsic = this._api.tx.gearVoucher.issue(to, program, value);
        return { extrinsic: this.extrinsic, voucherId };
    }
    async exists(programId, accountId) {
        try {
            await validate.validateVoucher(programId, accountId, this._api);
        }
        catch (_) {
            return false;
        }
        return true;
    }
}

exports.GearVoucher = GearVoucher;
