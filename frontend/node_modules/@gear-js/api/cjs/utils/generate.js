'use strict';

var utilCrypto = require('@polkadot/util-crypto');
var util = require('@polkadot/util');
require('@polkadot/types');
require('assert');
var createType = require('../metadata/create-type.js');
require('../metadata/programMetadata.js');

const VOUCHER_PREFIX = util.stringToU8a('modlpy/voucher__');
function generateCodeHash(code) {
    return utilCrypto.blake2AsHex(util.u8aToU8a(code), 256);
}
function generateProgramId(codeOrHash, salt) {
    const [code, codeHash] = typeof codeOrHash === 'string' ? [undefined, codeOrHash] : [codeOrHash, undefined];
    const codeHashU8a = codeHash ? util.u8aToU8a(codeHash) : utilCrypto.blake2AsU8a(code, 256);
    const saltU8a = createType.CreateType.create('Vec<u8>', salt).toU8a().slice(1);
    const programStrU8a = new TextEncoder().encode('program');
    const id = Uint8Array.from([...programStrU8a, ...codeHashU8a, ...saltU8a]);
    return utilCrypto.blake2AsHex(id, 256);
}
function generateVoucherId(who, program) {
    const whoU8a = util.u8aToU8a(who);
    const programU8a = util.u8aToU8a(program);
    const id = Uint8Array.from([...VOUCHER_PREFIX, ...whoU8a, ...programU8a]);
    return utilCrypto.blake2AsHex(id, 256);
}

exports.generateCodeHash = generateCodeHash;
exports.generateProgramId = generateProgramId;
exports.generateVoucherId = generateVoucherId;
