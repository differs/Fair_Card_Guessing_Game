'use strict';

require('@polkadot/types');
require('assert');
require('@polkadot/util');
var createType = require('./metadata/create-type.js');
require('./metadata/programMetadata.js');
var Storage = require('./Storage.js');

class GearProgramState extends Storage.GearProgramStorage {
    /**
     * ## Read state using meta wasm file
     * @param args
     * @param meta StateMetadata returned from getStateMetadata function
     */
    async readUsingWasm(args, meta) {
        const fnTypes = meta?.functions[args.fn_name];
        const payload = fnTypes?.input !== undefined && fnTypes?.input !== null
            ? Array.from(meta.createType(fnTypes.input, args.argument).toU8a())
            : null;
        const code = typeof args.wasm === 'string' ? args.wasm : createType.CreateType.create('Bytes', Array.from(args.wasm));
        const state = await this._api.rpc['gear'].readStateUsingWasm(args.programId, args.fn_name, code, payload, args.at);
        return meta && fnTypes ? meta.createType(fnTypes.output, state) : state;
    }
    /**
     *
     * @param args ProgramId and hash of block where it's necessary to read state (optional)
     * @param meta Program metadata returned from getProgramMetadata function
     * @param type (optional) Index of type to decode state. metadata.types.state is uesd by default
     */
    async read(args, meta, type) {
        const state = await this._api.rpc['gear'].readState(args.programId, args.at || null);
        return meta.createType(type || meta.types.state, state);
    }
}

exports.GearProgramState = GearProgramState;
