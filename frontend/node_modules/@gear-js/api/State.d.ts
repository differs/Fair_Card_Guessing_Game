/// <reference types="node" />
import { Codec } from '@polkadot/types/types';
import { HexString } from '@polkadot/util/types';
import { ProgramMetadata, StateMetadata } from './metadata';
import { GearProgramStorage } from './Storage';
interface ReadStateArgs {
    programId: HexString;
    at?: HexString;
}
export declare class GearProgramState extends GearProgramStorage {
    /**
     * ## Read state using meta wasm file
     * @param args
     * @param meta StateMetadata returned from getStateMetadata function
     */
    readUsingWasm(args: {
        programId: HexString;
        fn_name: string;
        wasm: Buffer | Uint8Array | HexString;
        argument?: any;
        at?: HexString;
    }, meta: StateMetadata): Promise<Codec>;
    /**
     *
     * @param args ProgramId and hash of block where it's necessary to read state (optional)
     * @param meta Program metadata returned from getProgramMetadata function
     * @param type (optional) Index of type to decode state. metadata.types.state is uesd by default
     */
    read(args: ReadStateArgs, meta: ProgramMetadata, type?: number): Promise<Codec>;
}
export {};
